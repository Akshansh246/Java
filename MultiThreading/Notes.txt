-> Multithreading is sort of async programming.
-> How we can achieve Multiple, tasks executing at a time.
-> Parallel programming is achieved in this.
-> If something is done in a particular order its called Synchronous programming and if it is not
then its called Asynchronous programming.

ðŸ”¹ What is a Thread?
    A thread is a lightweight subprocess â€” the smallest unit of processing. It shares memory with other
    threads of the same process, making it efficient for tasks that need to run in parallel.

ðŸ”¹ Thread Lifecycle
    1. New â€“ When a thread is created
    2. Runnable â€“ After start() is called
    3. Running â€“ When thread starts executing
    4. Blocked/Waiting â€“ When thread is waiting to acquire a resource or waiting for another thread
    5. Terminated â€“ When the run() method finishes or the thread is stopped
    6. Dead â€“ When the thread is no longer referenced and is eligible for garbage collection

-> Main thread always runs first then user defined will run.

-> In the case of Runnable main thread runs first rather than the user defined.

-> .join should be always inside try and catch block, It pauses the main block, that means user-defined 
will run first then the main thread.

ðŸ”¹ Flaws or Demerits of threads
    1. If a varible is shared with both the threads, like in the case of back balance they will request
    to deduct money from the balance which will create and ambuiguity as
        balance = 1000
        thread A requests = 800
        thread B requests = 500
        both conditions will be true but it will deduct 1300 from the account.

-> To avoid this we use Synchronization, which is a way to control the access of multiple threads
   to shared resources. It ensures that only one thread can access a resource at a time.

ðŸ”¹ Synchronization
    - Synchronization is achieved using the synchronized keyword in Java.
    - It can be applied to methods or blocks of code.
    - When a method or block is synchronized, only one thread can execute it at a time.
    - This prevents data inconsistency and ensures thread safety.

-> Also we can use callback functions to avoid the ambiguity in the case of threads. Or to create a New
    thread we can use the Runnable interface.

-> setPriority is used to set the priority of the thread, it can be set from 1 to 10, where 1 is the 
   lowest and 10 is the highest priority. The default priority is 5.
   Also we can use MAX_PRIORITY, MIN_PRIORITY, and NORM_PRIORITY constants from the Thread class.

-> Thread.sleep() is used to pause the execution of the current thread for a specified amount of time.

-> Thread.yield() is used to pause the current thread and allow other threads to execute. It is a way
   to give up the CPU voluntarily. It randomly selects a thread and pauses it for a while.

